<?php

function match_events_block_info(){
  $blocks['players_stats'] = array(
    'info' => t('Players Stats'),
    'status'=>TRUE,
    'visibility'=>1,
    'region'=>-1,
  );
  
  $blocks['team_stats'] = array(
    'info' => t('Team Stats'),
    'status'=>TRUE,
    'visibility'=>1,
    'region'=>-1,
  );
  
  return $blocks;
  
}

function match_events_block_view($delta){
  switch($delta){
    case 'players_stats':
      $block['content'] = season_stats();
      return $block;
      break;
    case 'team_stats':
      $block['content'] = season_team_stats();
      return $block;
      break;  
  }

}

function match_events_form_alter(&$form, $form_state, $form_id){
  if($form_id == 'match_node_form'){
    drupal_add_css(drupal_get_path('module', 'custom_match').'/misc/styles.css');
  } 
}

function match_events_preprocess_node(&$vars){
  if($vars['node']->type == 'person'){
    $stat_html = '';
    $player_matches  = match_events_get_player_matches($vars['nid']);
    if(!empty($player_matches)){
      $vocab = taxonomy_vocabulary_machine_name_load('match_event_type');
      $terms = taxonomy_get_tree($vocab->vid,0, 1);
      $tids = array();
      foreach($terms as $term)  
        $tids[] = $term->tid;
      $events = taxonomy_term_load_multiple($tids);
      $summary = array();
      foreach($events as $_event){
        $summary[$_event->tid] = 0;
      }
      
      $header = array(
        'match_date' =>'',
        'match' => '',
        'result' =>'' ,
        'events' => '',
      );
      foreach($player_matches as $_match){
        $rows[$_match['nid']] = array(
          'match_date' => $_match['match_date'],
          'match' => array('data'=>l($_match['title'], 'node/'.$_match['nid']),'class'=>'team_name'),
          'result' => l($_match['result'], 'node/'.$_match['nid']),
        );
        $rows[$_match['nid']]['events'] = '';
       
        foreach($_match['events'] as $_evt){
          $_event = key($_evt);
          $summary[$_event]++;
            
          $_minute = $_evt[$_event];
          $rows[$_match['nid']]['events'] .= theme_image(array('path'=>$events[$_event]->field_match_event_type_icon['und'][0]['uri'], 'attributes'=>array('title'=>'('.strtolower($events[$_event]->name).', '.$_minute.' '.t('min').')', ))).' '.$_minute."' ";
        }
      }
      $table['table'] = array(
          '#theme'=>'table',
          '#header'=>$header,
          '#rows'=>$rows);
      //$penalty_goals = $summary[match_events_get_event_id_by_code('penalty_goal', $events)];    
      $table['summary'] = array(
        '#markup' => 
          '<b>'.t('Total goals').'</b>: '.(int)($summary[match_events_get_event_id_by_code('goal', $events)] + $summary[match_events_get_event_id_by_code('penalty_goal', $events)]) .' ('.t('penalty goals').': '.$summary[match_events_get_event_id_by_code('penalty_goal', $events)].')<br />'.
          '<b>'.t('Games played').'</b>: '.count($player_matches).' ('.t('starting').': '.(count($player_matches) - $summary[match_events_get_event_id_by_code('sub_in', $events)]).')<br />'
        );    
          
      $stat_html = render($table);
    }
    $vars['stat_html'] = $stat_html;
  }
}

function match_events_get_player_matches($player_nid=null){


  $player_matches = db_query("
    
    SELECT * FROM
    ((SELECT squad.entity_id as nid, node.title,  match_date.`field_match_start_date_value`, result.`field_match_result_value` 
    FROM `field_data_field_match_arsenal_squad` squad
    INNER JOIN `node` node on node.nid = squad.entity_id
    INNER JOIN `field_data_field_match_season` season on season.entity_id = squad.entity_id
    INNER JOIN `field_data_field_match_start_date` match_date on match_date.entity_id = squad.entity_id
    INNER JOIN `field_data_field_match_result` result on result.entity_id = squad.entity_id
    WHERE
    ".(!empty($player_nid) ? 'field_match_arsenal_squad_nid = :player_nid AND ' : '')." 
    field_match_season_tid = :season)
    
    UNION
    
    (SELECT evts.entity_id as nid,node.title,  match_date.`field_match_start_date_value`, result.`field_match_result_value`
      FROM `field_data_field_match_events` evts
      INNER JOIN node on evts.`entity_id` = node.nid
      INNER JOIN `field_data_field_match_season` season on season.entity_id = evts.entity_id
      INNER JOIN `field_data_field_match_event_player` player on evts.`field_match_events_value` = player.`entity_id`
      INNER JOIN `field_data_field_match_event_event_type` evt_type on evt_type.`entity_id` = evts.`field_match_events_value` 
      INNER JOIN `field_data_field_match_event_type_code` event_type_code on event_type_code.`entity_id` = evt_type.`field_match_event_event_type_tid`
      INNER JOIN `field_data_field_match_start_date` match_date on match_date.entity_id = evts.entity_id
      INNER JOIN `field_data_field_match_result` result on result.entity_id = evts.entity_id
      WHERE season.field_match_season_tid = :season 
      AND player.field_match_event_player_nid = :player_nid 
      AND event_type_code.field_match_event_type_code_value = 'sub_in'
       )) t
    ORDER BY field_match_start_date_value
  ",array(':player_nid'=>$player_nid, ':season'=>variable_get('tournament_table_default_season',0)))->fetchAllAssoc('nid');

  foreach($player_matches as $_match){
    $matches[$_match->nid]['nid'] = $_match->nid;
    $matches[$_match->nid]['title'] = $_match->title;
    $matches[$_match->nid]['match_date'] = date('d.m.Y', strtotime($_match->field_match_start_date_value));
    $matches[$_match->nid]['result'] = $_match->field_match_result_value;
    $matches[$_match->nid]['events'] = array(); 
  }
  
  $player_events = db_query("
    SELECT node.nid AS nid, node.title, evt_minute.`field_match_event_minute_value`, evt_type.`field_match_event_event_type_tid`
    FROM 
    node node
    LEFT JOIN field_data_field_match_events field_data_field_match_events ON node.nid = field_data_field_match_events.entity_id AND (field_data_field_match_events.entity_type = 'node' AND field_data_field_match_events.deleted = 0)
    LEFT JOIN `field_data_field_match_event_player` pl on pl.`entity_id` = field_data_field_match_events.field_match_events_value
    LEFT JOIN `field_data_field_match_event_minute` evt_minute on evt_minute.`entity_id` = field_data_field_match_events.field_match_events_value
    LEFT JOIN `field_data_field_match_event_event_type` evt_type on evt_type.`entity_id` = field_data_field_match_events.field_match_events_value
    WHERE (( (node.status = '1') AND (node.type = 'match') AND pl.`field_match_event_player_nid` = :player_nid AND nid IN (:nids)))
    ORDER BY  field_match_event_minute_value ASC
  ",array(':player_nid'=>$player_nid,':nids'=> array_keys($matches)));
  
  foreach($player_events as $event){
    $matches[$event->nid]['events'][] = array($event->field_match_event_event_type_tid => $event->field_match_event_minute_value);
  }
  return $matches;
}

function match_events_get_event_id_by_code($code, $events){
  foreach($events as $event){
    if(isset($event->field_match_event_type_code) && isset($event->field_match_event_type_code['und']['0']['safe_value']) && $event->field_match_event_type_code['und']['0']['safe_value'] == $code)
      return $event->tid;
  }
  return false;
}

function season_stats(){   
  return get_season_stats();
}

function season_team_stats(){
  $cache = cache_get('stats:team_stats');
  if(!empty($cache->data)) {
    return $cache->data;  
  }
  else{
    $stats_html = get_team_stats();
    cache_set('stats:team_stats', $stats_html);
    return $stats_html;
  }

}

function get_season_stats(){

  $cache = cache_get('stats:players_stats');
  if(!empty($cache->data)) {
    $table_html = $cache->data;  
  }
  else{
    //Tournaments to show
    $tournaments_to_show = array(34, 37, 35, 36);
  
    $rows = db_query(
      "SELECT player_node.nid, player_node.title, event_type_code.`field_match_event_type_code_value`, tournament.`field_match_tournament_tid`, COUNT(*) as event_count
      FROM `field_data_field_match_events` evts
      INNER JOIN `field_data_field_match_season` season on season.entity_id = evts.entity_id
      INNER JOIN `field_data_field_match_event_player` player on evts.`field_match_events_value` = player.`entity_id`
      INNER JOIN node player_node on player.`field_match_event_player_nid` = player_node.nid
      INNER JOIN `field_data_field_match_event_event_type` evt_type on evt_type.`entity_id` = evts.`field_match_events_value` 
      INNER JOIN `field_data_field_match_tournament` tournament on  tournament.`entity_id` = evts.`entity_id`
      INNER JOIN `field_data_field_match_event_type_code` event_type_code on event_type_code.`entity_id` = evt_type.`field_match_event_event_type_tid`
      WHERE season.field_match_season_tid = :season AND tournament.`field_match_tournament_tid` IN (:tournaments)
      GROUP BY event_type_code.`field_match_event_type_code_value`, tournament.`field_match_tournament_tid`, player_node.title
      ORDER BY player_node.title"
      ,array(':season'=>variable_get('tournament_table_default_season',0), ':tournaments'=>$tournaments_to_show)
    )->fetchAll();
    
    $players_stats = array();
    $players_names = array();
    foreach($rows as $row){
      $players_stats[$row->nid][$row->field_match_tournament_tid][$row->field_match_event_type_code_value] = $row->event_count;
      $name = (mb_substr_count($row->title, ' ') == 0 ? $row->title : mb_substr($row->title, mb_strpos($row->title,' ')+1));
      $players_names[$row->nid] = mb_strtoupper(mb_substr($name,0,1)).mb_substr($name,1);
    }
     $games_rows = db_query(
      "SELECT node.nid, node.title,  tournament.`field_match_tournament_tid`, count(squad.`field_match_arsenal_squad_nid`) as games_cnt
      FROM `field_data_field_match_arsenal_squad` squad
      INNER JOIN `node` node on node.nid = squad.field_match_arsenal_squad_nid
      INNER JOIN `field_data_field_match_season` season on season.entity_id = squad.entity_id
      INNER JOIN `field_data_field_match_tournament` tournament on  tournament.`entity_id` = squad.`entity_id`
      WHERE field_match_season_tid = :season AND tournament.`field_match_tournament_tid` IN (:tournaments)
      group BY tournament.`field_match_tournament_tid`, node.title"
      ,array(':season'=>variable_get('tournament_table_default_season',0), ':tournaments'=>$tournaments_to_show)
    )->fetchAll();
   foreach($games_rows as $row){
      $players_stats[$row->nid][$row->field_match_tournament_tid]['starts'] = $row->games_cnt;
      $name = (mb_substr_count($row->title, ' ') == 0 ? $row->title : mb_substr($row->title, mb_strpos($row->title,' ')+1));
      $players_names[$row->nid] = mb_strtoupper(mb_substr($name,0,1)).mb_substr($name,1);
    } 
    
    $players_totals = array();
    foreach($players_stats as $name => $player){
      $players_stats[$name]['total'] = array('games'=>0, 'goal'=>0, 'yellow_card'=>0, 'red_card'=>0);
      foreach($player as $tournament => $data){
        $players_stats[$name][$tournament]['games'] = (int)(isset($players_stats[$name][$tournament]['starts']) ? $players_stats[$name][$tournament]['starts'] : 0) + (int)(isset($players_stats[$name][$tournament]['sub_in']) ? $players_stats[$name][$tournament]['sub_in'] : 0);
        unset($players_stats[$name][$tournament]['starts']);  
        unset($players_stats[$name][$tournament]['sub_in']);  
        
        $players_stats[$name]['total']['games'] += (int)(isset($players_stats[$name][$tournament]['games']) ? $players_stats[$name][$tournament]['games'] : 0);
        $players_stats[$name]['total']['goal'] += (int)(isset($players_stats[$name][$tournament]['goal']) ? $players_stats[$name][$tournament]['goal'] : 0);
        $players_stats[$name]['total']['yellow_card'] += (int)(isset($players_stats[$name][$tournament]['yellow_card']) ? $players_stats[$name][$tournament]['yellow_card'] : 0);
        $players_stats[$name]['total']['red_card'] += (int)(isset($players_stats[$name][$tournament]['red_card']) ? $players_stats[$name][$tournament]['red_card'] : 0);
        
      }
      $players_stats[$row->nid][$row->field_match_tournament_tid]['starts'] = $row->games_cnt;
    }
    
    $tournament_voc = taxonomy_vocabulary_machine_name_load('tournament');
    $t = taxonomy_get_tree($tournament_voc->vid);
    $tournaments = array();
    foreach($t as $tournament){
      $tournaments[$tournament->tid] = $tournament->name;
    }
    
    $event_voc = taxonomy_vocabulary_machine_name_load('match_event_type');
    $evts = taxonomy_get_tree($event_voc->vid);
    $events = array();
    foreach($evts as $evt){
      $events[$evt->tid] = $evt->name;
    }
  
    //table header
    $header = array(
      'name'=>'',
    );
    $first_row = array('class'=>array('first-row'));
    $first_row['data'] = array('name'=>t(''));
    
    foreach($tournaments_to_show as $tid){
      $header[$tid] = array('data'=>$tournaments[$tid],'colspan'=>2);  
      $first_row['data'][$tid.'_games'] = array('data'=>t('stats_games'));  
      $first_row['data'][$tid.'_goals'] = array('data'=>t('stats_goals'));  
      
    }
    $header['total'] = array('data'=>t('stats_total'),'colspan'=>2);
    $first_row['data']['total_games'] = array('data'=>t('stats_games'));  
    $first_row['data']['total_goals'] = array('data'=>t('stats_goals'));
    
    $header['yellow_card'] = array('data'=>t('stats_yellow_card')); 
    $header['red_card'] = array('data'=>t('stats_red_card')); 
    $first_row['data']['yellow_card'] = '';  
    $first_row['data']['red_card'] = '';

    $rows = array('_'=>$first_row);
    
    //$players = node_load_multiple(array_keys($players_stats));
    foreach($players_stats as $nid => $data){
      $row = array();
      $row['name'] = array('data'=>l($players_names[$nid], 'node/'.$nid),'class'=>'player_name');
      foreach($tournaments_to_show as $tid){
        $row[$tid.'_games'] = array('data'=>(isset($data[$tid]['games']) ? $data[$tid]['games'] : 0));  
        $row[$tid.'_goals'] = array('data'=>(isset($data[$tid]['goal']) ? $data[$tid]['goal'] : 0));  
      }
      
      $row['total_games'] = array('data'=>(isset($data['total']['games']) ? $data['total']['games'] : 0));  
      $row['total_goals'] = array('data'=>(isset($data['total']['goal']) ? $data['total']['goal'] : 0));  
      $row['yellow_card'] = array('data'=>(isset($data['total']['yellow_card']) ? $data['total']['yellow_card'] : 0));  
      $row['red_card'] = array('data'=>(isset($data['total']['red_card']) ? $data['total']['red_card'] : 0));  
    
      
      $rows[$players_names[$nid]] = $row;
    }
    
    ksort($rows);
    $season = taxonomy_term_load(variable_get('tournament_table_default_season',0));
    $table = array(
      '#theme'=>'table',
      '#attributes'=>array('class'=>array('stats-table')),
      '#header'=>$header,
      '#rows'=>$rows,
      '#caption'=>t('players_stats_table_header',array('!season'=>$season->name)),
    );
    
    $table_html = render($table);
    cache_set('stats:players_stats',$table_html);
  }
  return $table_html;
}

function get_team_stats(){
  $tournaments_to_show = array(34, 37, 35, 36);
  
    $rows = db_query(
      "SELECT 
        node.title, 
          tournament.`field_match_tournament_tid`, 
          result.`field_match_result_value`, 
          place.`field_match_place_value`,
          CAST(SUBSTRING_INDEX(result.`field_match_result_value`,':',1) AS SIGNED) home_goals,
          CAST(SUBSTRING_INDEX(result.`field_match_result_value`,':',-1) AS SIGNED) away_goals, 
        (SELECT case place.`field_match_place_value` 
            WHEN 'away' THEN  away_goals - home_goals 
              ELSE home_goals - away_goals
           END) as  goals_diff    
      FROM node
      INNER JOIN `field_data_field_match_tournament` tournament on tournament.`entity_id` = node.nid
      INNER JOIN `field_data_field_match_season` season on season.`entity_id` = node.nid 
      INNER JOIN `field_data_field_match_result` result on result.`entity_id` = node.nid
      INNER JOIN `field_data_field_match_place` place on place.`entity_id` = node.nid 
      where type = 'match' 
      AND season.`field_match_season_tid` = :season
      AND tournament.`field_match_tournament_tid` IN (:tournaments)
      AND result.`field_match_result_value` != '' AND result.`field_match_result_value` IS NOT NULL
      ORDER BY tournament.`field_match_tournament_tid`
      "
      ,array(':season'=>variable_get('tournament_table_default_season',0), ':tournaments'=>$tournaments_to_show)
    )->fetchAll();
   
    $stats = array();
    foreach($tournaments_to_show as $tournament){
      $stats[$tournament]['home'] = array('win'=>0,'lose'=>0,'draw'=>0,'goals_for'=>0, 'goals_against'=>0, 'goal_diff'=>0);
      $stats[$tournament]['away'] = array('win'=>0,'lose'=>0,'draw'=>0,'goals_for'=>0, 'goals_against'=>0, 'goal_diff'=>0);
      $stats[$tournament]['neutral'] = array('win'=>0,'lose'=>0,'draw'=>0,'goals_for'=>0, 'goals_against'=>0, 'goal_diff'=>0);
    
    }
   
    foreach($rows as $row){
      if($row->goals_diff > 0)
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['win']++;
      elseif($row->goals_diff < 0)
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['lose']++;
      elseif($row->goals_diff == 0)
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['draw']++;
        
      if($row->field_match_place_value == 'away'){
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['goals_for']+=$row->away_goals;
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['goals_against']+=$row->home_goals;
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['goal_diff']+=$row->goals_diff;
      }
      else
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['goals_for']+=$row->home_goals;        
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['goals_against']+=$row->away_goals;        
        $stats[$row->field_match_tournament_tid][$row->field_match_place_value]['goal_diff']+=$row->goals_diff;        
    }
    
    //Table header
    $header = array(
      'home' => array('data'=>t('team_stats_home'),'colspan'=>6),
      'away' => array('data'=>t('team_stats_away'),'colspan'=>6),
      'total' => array('data'=>t('team_stats_total'),'colspan'=>6),
    );
    $first_row = array();
    foreach($header as $id=>$data){
      $first_row[$id.'_games'] = t('team_stats_games');
      $first_row[$id.'_win'] = t('team_stats_won');
      $first_row[$id.'_lose'] = t('team_stats_lose');
      $first_row[$id.'_draw'] = t('team_stats_draw');
      $first_row[$id.'_goals_for'] = t('team_stats_goals_for');
      $first_row[$id.'_goals_against'] = t('team_stats_goals_against');
    }
    
    $render_array = array();
    $season = taxonomy_term_load(variable_get('tournament_table_default_season',0)); 
    foreach($tournaments_to_show as $tournament){
      $stats[$tournament]['total'] = array();
      foreach($stats[$tournament]['home'] as $k => $val){
        $stats[$tournament]['home'][$k] = $val + $stats[$tournament]['neutral'][$k]; 
        
        $stats[$tournament]['total'][$k] = $stats[$tournament]['home'][$k] + $stats[$tournament]['away'][$k];  
      }
      
      $stats[$tournament]['home']['games'] =  $stats[$tournament]['home']['win'] + $stats[$tournament]['home']['lose'] + $stats[$tournament]['home']['draw'];
      $stats[$tournament]['away']['games'] =  $stats[$tournament]['away']['win'] + $stats[$tournament]['away']['lose'] + $stats[$tournament]['away']['draw'];
      $stats[$tournament]['total']['games'] =  $stats[$tournament]['total']['win'] + $stats[$tournament]['total']['lose'] + $stats[$tournament]['total']['draw'];
      
      unset($stats[$tournament]['neutral']);
      //format tables
      $rows = array($first_row);
      $row = array();
      foreach($first_row as $id=>$data){
        $place = substr($id, 0, strpos($id,'_'));
        $type = substr($id, strpos($id, '_')+1);
        $row[$id] = array('data'=>$stats[$tournament][$place][$type]);
        if(in_array($type, array('win','lose','draw'))){
          $row[$id]['data'] .= '<br />'.(!empty($stats[$tournament][$place]['games']) ? round(($stats[$tournament][$place][$type] / $stats[$tournament][$place]['games']) * 100) : 0 ).'%';
        }
      }
      $rows[] = $row;
      $tournament_info = taxonomy_term_load($tournament);
      $table = array(
        '#theme' => 'table',
        '#header' => $header,
        '#rows' => $rows,
        '#attributes' => array('class'=>array('stats-table')) ,
        '#caption' => t('team_stats_table_caption',array('!season'=>$season->name, '!tournament'=>$tournament_info->name))
      );

      $render_array[] = array('#markup'=>'<div style="height: 20px">&nbsp;</div>');      
      $render_array[] = $table;
    }
    return render($render_array);
}

?>