<?php

function customization_menu(){
  $items = array();
  
  $items['play_video/%']=array(
    'type'=>MENU_CALLBACK,
    'page callback' => '_play_video',
    'page arguments' =>array(1),
    'access callback' => TRUE
    
  );
  
  $items['wallpaper_download/%']=array(
    'type'=>MENU_CALLBACK,
    'page callback' => '_file_download',
    'page arguments' =>array(1),
    'access callback' => TRUE
    
  );
  
  $items['file_download/%']=array(
    'type'=>MENU_CALLBACK,
    'page callback' => '_file_download',
    'page arguments' =>array(1),
    'access callback' => TRUE
    
  );
  
  $items['node/add/edit_galleries']=array(
    'title' => t('Edit galleries'),
    'page callback' => '_customization_edit_galleries',
    'access callback' => 'node_access',
    'access arguments' => array('create', 'gallery'),
  );
  
  return $items;
}

function customization_block_info(){
  $blocks['customization_login_block'] = array(
    'info' => t('Login links'),
    'status'=>TRUE,
    'weight'=>0,
    'region'=> 'header',
    'visibility'=>1,
    'cache' => -1,
  );
  
  $blocks['random_article'] = array(
    'info' => t('Random article'),
    'status'=>TRUE,
    'weight'=>0,
    'region'=> 'right',
    'pages'=> '<front>',
    'visibility'=>1,
    'cache' => -1,
  );
  
  $blocks['historical_fact'] = array(
    'info' => t('This day in history'),
    'status'=>TRUE,
    'weight'=>0,
    'visibility'=>1,
    'region'=> 'header',
    'cache' => -1,
  );
  
  return $blocks;
}

function customization_block_info_alter(&$blocks, $theme, $code_blocks){
  if(isset($blocks['nodeblock'])){
    $nids = array_keys($blocks['nodeblock']);
    $nodes = node_load_multiple($nids);
    foreach($nodes as $node){
      if($node->type == 'banner' && strtotime($node->field_banner_end_date[$node->language][0]['value'].' +1 day') < time() && $node->status ==1){
        $node->status = 0;
        node_save($node);
     }
    }
  }
}

function customization_block_list_alter(&$blocks){
  $nids = array();
  foreach($blocks as $block)
    if($block->module == 'nodeblock')
      $nids[$block->delta] = $block->bid;
  if(!empty($nids)){
    $nodes = node_load_multiple(array_keys($nids));
    foreach($nodes as $node){
      if($node->type == 'banner' && !(strtotime($node->field_banner_start_date[$node->language][0]['value']) < time() &&
         ((isset($node->field_banner_end_date[$node->language][0]['value']) && $node->field_banner_end_date[$node->language][0]['value'] != null && strtotime($node->field_banner_end_date[$node->language][0]['value'].' +1 day') > time())
          || !isset($node->field_banner_end_date[$node->language][0]['value']) 
          || $node->field_banner_end_date[$node->language][0]['value'] == null)
          )){
              unset($blocks[$nids[$node->nid]]);
        }
       }
  }
}

function customization_theme(){
  return array(
  'customization_login_block'=> array(),
  'historical_fact_block'=> array('variables'=>NULL),
  'customization_content_banner'=> array('variables'=>array('node'=>NULL)),
  'customization_arsenal_logo_match_block'=> array(),
  'customization_simple_tabs'=> array('variables'=>array()),
  'customization_match_teaser'=> array('variables'=>array()),
  'customization_match_team_block'=> array('variables'=>array()),
  );
}
  
function customization_block_view($delta){
  switch($delta){
    case 'customization_login_block':
      $block['content'] = theme('customization_login_block');
      return $block;
      break;
        
    case 'random_article':
      $block['content'] = views_embed_view('random_article','block');
      return $block;
        break;  
        
    case 'historical_fact':
      $res = db_query("
        SELECT node.title AS node_title, node.nid AS nid, field_historical_fact_date_value as fact_date
        FROM 
        {node} node
        LEFT JOIN {field_data_field_historical_fact_date} field_data_field_historical_fact_date ON node.nid = field_data_field_historical_fact_date.entity_id AND (field_data_field_historical_fact_date.entity_type = 'node' AND field_data_field_historical_fact_date.deleted = 0)
        WHERE (( (node.status = '1') AND (node.type IN  ('historical_fact')) AND (node.promote <> '0') 
        AND (DATE_FORMAT(DATE_ADD(FROM_UNIXTIME(0), INTERVAL field_data_field_historical_fact_date.field_historical_fact_date_value SECOND),'%m-%d') = :date) ))
        ORDER BY RAND() DESC
        LIMIT 1 OFFSET 0
      ",array(':date'=>date('m-d')))->fetchAssoc();
    if(!empty($res)){
      $block['content'] = theme('historical_fact_block',$res);
      return $block;
    }
      
        break;      
  }
}

function theme_customization_content_banner($vars){
  $node = $vars['node'];
  
}    
function theme_customization_login_block(){
  $output = '<div id="block-custom-0" class="block block-custom">
        <div class="content">
            <ul class="LoginLinks">';
  if(user_is_logged_in()){
    global $user;
    $output .= '<li>'.l($user->name,'user/'.$user->uid).'</li><li></li><li>'.l(t("Logout"),'user/logout').'</li>';   
  }
  else{
    $output  .= '<li>'.l(t("Login"),'user').'</li><li></li><li>'.l(t("register"),'user/register').'</li>';
  }
  $output .= '</ul>
        </div>
    </div>';
  return $output;
}

function customization_preprocess_page(&$vars){
  //remove nodes from main page. 
  if(drupal_is_front_page())
    unset($vars['page']['content']['system_main']);
  if(isset($vars['node'])){
    $node = $vars['node'];  
    if($node->type == 'person') {
    if(!empty($node->field_person_number) && isset($node->field_person_number[$node->language]) && !empty($node->field_person_number[$node->language][0]['value']))
      $vars['title'] = $node->title. ' <span class="player-number">'.  $node->field_person_number[$node->language][0]['value'].'</span>';
      $vars['node']->title = $node->title. ' <span class="player-number">'.  $node->field_person_number[$node->language][0]['value'].'</span>';
    }                           
  }
}

function _play_video($nid){
  $node = node_load($nid);
  node_build_content($node, 'full', 'ru');
  die(render($node->content));
}

function _file_download($fid = null){
  if(empty($fid) && (int)$fid <=0) return;

  $file = file_load($fid);     
  $path_parts = explode('://',$file->uri);  
  $uri = $file->uri;
  if (file_exists($uri)) {
    // Let other modules provide headers and controls access to the file.
    // module_invoke_all() uses array_merge_recursive() which merges header
    // values into a new array. To avoid that and allow modules to override
    // headers instead, use array_merge() to merge the returned arrays.
    $headers = array();
    foreach (module_implements('file_download') as $module) {
      $function = $module . '_file_download';
      $result = $function($uri);
      if ($result == -1) {
        return drupal_access_denied();
      }
      if (isset($result) && is_array($result)) {
        $headers = array_merge($headers, $result);
      }
    }
    if(isset($headers['Content-Disposition'])){
      if(strpos($headers['Content-Disposition'],'inline')!==false)
        $headers['Content-Disposition'] = str_replace('inline','attachment',$headers['Content-Disposition']); 
      else
       $headers['Content-Disposition'] = 'attachment; '.$headers['Content-Disposition'];   
    }
    else
       $headers['Content-Disposition'] = 'attachment; filename="'.$path_parts[1].'"';
    
    if (count($headers)) {
      file_transfer($uri, $headers);
    }
  }
  return;
}

function mb_wordwrap($string, $width=75, $break="\n", $cut = false) {
    $words = explode(' ',$string);
    foreach($words as &$word) {
      if (!$cut) {
          $regexp = '#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){'.$width.',}\b#U';
      } else {
          $regexp = '#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){'.$width.'}#';
      }
      $string_length = mb_strlen($word,'UTF-8');
      $cut_length = ceil($string_length / $width);
      $i = 1;
      $new_word = '';
      while ($i < $cut_length) {
          preg_match($regexp, $word,$matches);
          $new_string = $matches[0];
          $new_word .= $new_string.$break;
          $word = substr($word, strlen($new_string));
          $i++;
      }
      $word = $new_word.$word;
    }
    return join(' ',$words);
  }

function customization_form_alter(&$form, &$form_state, $form_id){ 
  if($form_id == 'user_login' || $form_id == 'user_login_block'){
    $form['#submit'][] = '_customization_login_submit';
  }
  elseif($form_id == 'gallery_node_form' && empty($form['nid']['#value'])){
    $init = $form['field_gallery_images']['und'][0];
    for($i=1; $i<20; $i++){
      $new_item = $init;
      $new_item['_weight']['#title'] = str_replace('1',$i+1,$new_item['_weight']['#title']);
      $new_item['_weight']['#delta'] = $i+1;
      $new_item['_weight']['#weight'] = $i*100;
      $form['field_gallery_images']['und'][$i] = $new_item;  
    }
  }
}                    

function customization_form_node_form_alter(&$form, $form_state) { 
  drupal_add_js(drupal_get_path('module','customization').'/customization.js');
}

function _customization_login_submit(){
  drupal_goto('<front>');   
}

function theme_historical_fact_block($vars){
  if(isset($vars['node_title']) && isset($vars['nid']) && isset($vars['fact_date'])){
    return '<div class="historical_fact">'.date('d.m.Y',$vars['fact_date']).' '.l($vars['node_title'], 'historical-facts').'</div>';
  }
}

function customization_views_query_alter(&$view, &$query){
  if($view->name == 'historical_facts'){
    $query->orderby[0] = array(
        'field'=>'DATE_FORMAT(adddate(from_unixtime(0), interval field_data_field_historical_fact_date.field_historical_fact_date_value second),\'%m\')',
        'direction'=>'asc',
    );
    
    $query->orderby[1] = array(
        'field'=>'DATE_FORMAT(adddate(from_unixtime(0), interval field_data_field_historical_fact_date.field_historical_fact_date_value second),\'%d\')',
        'direction'=>'asc',
    );
    
    $query->orderby[2] = array(
        'field'=>'DATE_FORMAT(adddate(from_unixtime(0), interval field_data_field_historical_fact_date.field_historical_fact_date_value second),\'%Y\')',
        'direction'=>'asc',
    );
  }
}

function _customization_edit_galleries(){
  $_SESSION['node_overview_filter'] = array(array('type','gallery'));
  drupal_goto('admin/content');
}

function customization_preprocess_node(&$vars){
  $node = $vars['node'];
  
  if($node->type == 'person'){
    /*if(!empty($node->field_person_number) && !empty($node->field_person_number[$node->language][0]['value']))
      $vars['title'] = $node->field_person_number[$node->language][0]['value'].'. '.$vars['title'];
      $vars['node']->title = $node->field_person_number[$node->language][0]['value'].'. '. $vars['node']->title;
      drupal_set_title($node->field_person_number[$node->language][0]['value'].'. '. $vars['node']->title);  */
  }
  
  
}

?>
