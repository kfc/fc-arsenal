<?php

// Load all Field module hooks for Audio.
module_load_include('inc', 'audiofield', 'audio.field');

function audiofield_init() {
  $player = audiofield_get_player_def( 'mp3' );
  if ( ! empty( $player['css'] )) {
    drupal_add_css( $player['css']   );
  }
}

/**
 * Implementation of hook_menu().
 */
function audiofield_menu() {
  
  $items['admin/config/media/audiofield'] = array(
    'title' => 'Audio Field',
    'description' => 'Configure Audiofield.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('audiofield_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
      return $items;
}

/**
 * Implementation of hook_permission().
 */
function audiofield_permission() {
   return array(
    'download own audio files' => array(
      'title' => t('Download Own Audio Files'),
      'description' => t('TODO Add a description for \'access API reference\''),
    ),
    'download all audio files' => array(
      'title' => t('Download All Audio Files'),
      'description' => t('TODO Add a description for \'administer API reference\''),
    ),
  );
}

function audiofield_admin_settings_form() {
  global $base_path;
  global $base_url;

  $audio_players=audiofield_players();
  $players=array();
  $download_players = '';
  foreach ($audio_players as $id => $player) {
    if (file_exists($player['path'])) {
      foreach ($player['filetypes'] as $filetype) {
        $players[$filetype][$id]=$player['name'] . '<br/>' . call_user_func($player['callback'], $base_path . $player['path'], "");
      }
    }
    else{
      $download_players .='<li>Download ' . l($player['name'], $player['download_link']) . '</li>';
    }
  }
  
  //MP3 Players list
  if (!empty($players)) {
    $form['audiofield_audioplayer'] = array(
      '#type' => 'radios',
      '#title' => t('MP3 Audio Players'),
      '#options' => $players['mp3'],
      '#default_value' => variable_get('audiofield_audioplayer', 0),
    );
    }
  unset($players['mp3']);
  
  //Other players list (wav, wma,...)
  foreach ($players as $filetype => $type_player) {
    $form['audiofield_audioplayer_' . $filetype] = array(
      '#type' => 'radios',
      '#title' => check_plain( $filetype . '&nbsp;' . t('Audio Players')),
      '#options' => $type_player,
      '#default_value' => variable_get('audiofield_audioplayer_' . $filetype, 0),
    );
  }
  
  $form['audiofield_players_dir'] = array(
      '#type' => 'textfield',
      '#title' => t('Audio Players Directory'),
    '#description' => t('Download and extract audio players in this directory'),
      '#default_value' => variable_get('audiofield_players_dir', 'sites/all/libraries/player'),
    );
  
  if (!empty($download_players)) {
    $form['audiofield_downloadaudioplayer'] = array(
      '#type' => 'item',
      '#title' => t('Download and install audio players'),
      '#markup' => '<ul class="audiofield-download-players">' . $download_players . '</ul>',
    );
  }
  
    return system_settings_form($form);
}


/**
 * Implementation of hook_theme().
 */
function audiofield_theme() {
  $theme= array(
     /* 'audiofield_widget' => array(
      'variables' => array('element' => NULL),
      ),
    */
      // Themes for the formatters.
      'audiofield_formatter_audiofield_embedded' => array(
      'variables' => array('file' => NULL),
      'file' => 'audiofield_formatter.inc',
      ),
  );

  return $theme;
}

function audiofield_get_player_def( $op ) {
  global $base_path;
  
  $audio_players=audiofield_players();
  
  switch ($op) {
    case 'mp3':
    $mp3_player_id=variable_get('audiofield_audioplayer', 0);
    $mp3_player=isset( $audio_players[$mp3_player_id] ) ? $audio_players[$mp3_player_id] : FALSE;
    if(( ! $mp3_player ) || empty($mp3_player['callback'])) {
	  drupal_set_message(  "You must install and select at least one player to be able to play the audio." );
	  return array();
    }
    return $mp3_player;
    default:
    $other_player_id=variable_get('audiofield_audioplayer_' . $op, 'nanogong');
    $other_player=$audio_players[$other_player_id];
      return $other_player;
  }
}

/**
 * Get the object for the suitable player for the parameter resource
*/
function audiofield_get_player($audio_url, $op) {
  global $base_path;
  
  $audio_players=audiofield_players();
  
  switch ($op) {
    case 'mp3':
    $mp3_player_id=variable_get('audiofield_audioplayer', 0);
    $mp3_player=$audio_players[$mp3_player_id];
    if (empty($mp3_player['callback'])) {
      return "You must install and select at least one player to be able to play the audio.";
    }
    return call_user_func($mp3_player['callback'], $base_path . $mp3_player['path'], $audio_url);
    default:
    $other_player_id=variable_get('audiofield_audioplayer_' . $op, 'nanogong');
    $other_player=$audio_players[$other_player_id];
    if (empty($other_player['callback'])) {
    return "You must install and select at least one player to be able to play the audio.";
    }
    return call_user_func($other_player['callback'], $base_path . $other_player['path'], $audio_url);
      break;
  }
}

/**
 * Implements hook_audiofield_players().
 */
function audiofield_players() {
  $players=module_invoke_all('audiofield_players');

  $players['jplayer']=array(
    'path' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . "/jplayer/jquery.jplayer.min.js",
    'css' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . "/jplayer/jplayer.css",
    'name' => 'jPlayer',
    'download_link' => 'http://www.jplayer.org/download/',
    'filetypes' => array('mp3'),
    'callback' => 'audiofield_jplayer',
  );
  
  $players['wpaudioplayer']=array(
    'path' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . "/audio-player/player.swf",
    'name' => 'WordPress Audio Player',
    'download_link' => 'http://wpaudioplayer.com/download',
    'filetypes' => array('mp3'),
    'callback' => 'audiofield_wpaudioplayer',
  );
  
  $players['xspf_slim']=array(
    'path' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . "/xspf_player_slim.swf",
    'name' => 'XSPF Slim Player',
    'download_link' => 'http://sourceforge.net/projects/musicplayer/files/musicplayer/slim-player-0.2.3b/xspf_player_slim-correct-0.2.3.zip/download',
    'filetypes' => array('mp3'),
    'callback' => 'audiofield_xspf_slim',
  );
  
  $players['premium_beat_single_track']=array(
    'path' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . "/playerSinglePackage/playerSingle.swf",
    'name' => 'Premium Beat Single Player',
    'download_link' => 'http://www.premiumbeat.com/flash_resources/free_flash_music_player/single_track_flash_mp3_player.php',
    'filetypes' => array('mp3'),
    'callback' => 'audiofield_premium_beat_single_track',
  );
  
  $players['premium_beat_thin']=array(
    'path' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . "/OriginalThinMusicPlayer.swf",
    'name' => 'Premium Beat Thin Player',
    'download_link' => 'http://www.premiumbeat.com/flash_music_players/original/thin/',
    'filetypes' => array('mp3'),
    'callback' => 'audiofield_premium_beat_thin',
  );
  
  $players['premium_beat_mini']=array(
    'path' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . "/LWMusicPlayer.swf",
    'name' => 'Premium Beat Mini Player',
    'download_link' => 'http://www.premiumbeat.com/flash_music_players/original/mini/',
    'filetypes' => array('mp3'),
    'callback' => 'audiofield_premium_beat_mini',
  );
  
  if (module_exists('flowplayer')) {
    $players['flowplayer']=array(
      'path' => drupal_get_path('module', 'flowplayer') . '/flowplayer/flowplayer.swf',
      'name' => 'Flowplayer',
      'download_link' => 'http://drupal.org/project/flowplayer',
      'filetypes' => array('mp3'),
      'callback' => 'audiofield_flowplayer',
    );
  }

  return $players;
}

/* Audio Callback Functions */
function audiofield_jplayer( $player_path, $audio_file ) {
  static $instanceIndex = 0;
  if ( $audio_file == '' ) {
    return 'HTML5 media player for jQuery';
  } 
  else {
    $instanceIndex += 1;
    $path_parts =   explode(  '/', $player_path );
    $audio_file_name = array_pop( $path_parts );
    $player_base_path = implode( '/', $path_parts );
    drupal_add_js($player_path);
    return '<div id="jquery_jplayer_' . $instanceIndex . '" class="jp-jplayer"></div>

    <div class="jp-audio">
      <div class="jp-type-single">
      <div id="jp_interface_' . $instanceIndex . '" class="jp-interface">
      <ul class="jp-controls">
        <li><a href="#" class="jp-play" tabindex="1" style="display: block; ">play</a></li>
        <li><a href="#" class="jp-pause" tabindex="1" style="display: none; ">pause</a></li>
        <li><a href="#" class="jp-stop" tabindex="1">stop</a></li>
        <li><a href="#" class="jp-mute" tabindex="1">mute</a></li>
        <li><a href="#" class="jp-unmute" tabindex="1" style="display: none; ">unmute</a></li>
      </ul>
      <div class="jp-progress">
        <div class="jp-seek-bar" style="width: 100%; ">
          <div class="jp-play-bar" style="width: 0%; "></div>
        </div>
      </div>
      <div class="jp-volume-bar">
        <div class="jp-volume-bar-value" style="width: 80%; "></div>
      </div>
      <div class="jp-current-time">00:00</div>
      <div class="jp-duration">00:00</div>
  </div></div></div>
    <script type="text/javascript" >
          jQuery( "#jquery_jplayer_' . $instanceIndex . '" ).jPlayer({
            ready: function() {
              jQuery(this).jPlayer( "setMedia", {
                  mp3 : "' . $audio_file . '"
              });
            }
          });
      </script>';
  }
}


function audiofield_wpaudioplayer($player_path, $audio_file) {
return '<object id="audioplayer2" height="24" width="290" data="' . $player_path . '" type="application/x-shockwave-flash">
                          <param value="' . $player_path . '" name="movie"/>
                          <param value="playerID=2&amp;bg=0xCDDFF3&amp;leftbg=0x357DCE&amp;lefticon=0xF2F2F2&amp;rightbg=0xF06A51&amp;rightbghover=0xAF2910&amp;righticon=0xF2F2F2&amp;righticonhover=0xFFFFFF&amp;text=0x357DCE&amp;slider=0x357DCE&amp;track=0xFFFFFF&amp;border=0xFFFFFF&amp;loader=0xAF2910&amp;soundFile=' . $audio_file . '" name="FlashVars"/>
                          <param value="high" name="quality"/>
                          <param value="false" name="menu"/>
                          <param value="wmode" name="transparent"/>
                          </object>';
}

function audiofield_xspf_slim($player_path, $audio_file) {
return '<object type="application/x-shockwave-flash" width="175" height="14"
                    data="' . $player_path . '?song_url=' . $audio_file . '">
                    <param name="movie" value="' . $player_path . '?song_url=' . $audio_file . '" />
                    </object>';
}

function audiofield_premium_beat_single_track($player_path, $audio_file) {
return '<object><param name="autoplay" value="true" />
                <param name="controller"value="true" /> 
                <embed src="' . $player_path . '"  width="192" height="80" float="left" wmode="transparent" flashvars="soundPath=' . $audio_file . '" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
                </embed></object>';
}

function audiofield_premium_beat_thin($player_path, $audio_file) {
return '<object><param name="autoplay" value="true" />
                <param name="controller"value="true" /> 
                <embed src="' . $player_path . '"  width="220" height="21" float="left" wmode="transparent" flashvars="mediaPath=' . $audio_file . '&defaultVolume=100" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
                </embed></object>';
}

function audiofield_premium_beat_mini($player_path, $audio_file) {
return '<object><param name="autoplay" value="true" />
            <param name="controller"value="true" /> 
            <embed src="' . $player_path . '"  width="65" height="21" float="left" wmode="transparent" flashvars="mediaPath=' . $audio_file . '&defaultVolume=100" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
            </embed></object>';
}

if (module_exists('flowplayer')) {

function audiofield_flowplayer($player_path, $audio_file) {
  return theme('flowplayer', $audio_file, 'audiofield', array( 'style' => 'height: 24px', ));
}
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function audiofield_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $instance = $form['#instance'];
 
  if ($instance['widget']['type'] == 'audiofield_widget') {
    $form['instance']['settings']['file_extensions']['#default_value'] = 'mp3';
  }
}

/**
 * Implementation of hook_form_[form_id]_alter().
 *
 * Modify the add new field form to change the default formatter.
 */
function audiofield_form_field_ui_field_settings_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'audiofield_form_content_field_overview_submit';
}

/**
 * Submit handler to set a new field's formatter to "audiofield_embedded".
 */
function audiofield_form_content_field_overview_submit(&$form, &$form_state) {
  $entity_type = 'node';
  $field_name = $form_state['values']['field']['field_name'];
  $bundle =  $form_state['complete form']['#bundle'];
  $instance = field_read_instance($entity_type, $field_name, $bundle);

  if ($instance['widget']['module'] == 'audiofield') {
    foreach ($instance['display'] as $display_type => $display_settings) {
        if ($instance['display'][$display_type]['type'] == 'file_default') {
          $instance['display'][$display_type]['type'] = 'audiofield_embedded';
        }
    }
     field_update_instance($instance);
  }   
}

