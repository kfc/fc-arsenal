<?php

function node_reference_extra_form_alter(&$form, &$form_state, $form_id) {
  // Add 'Create New' link to node_reference content types
  if(isset($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE){
    foreach($form as $key=>$element)
      if(strpos($key,'field_') === 0){
        $field_info = field_info_field($key);
        if($field_info['type'] == 'node_reference'){
          $types = array();
          foreach($field_info['settings']['referenceable_types'] as $type)
            if($type != '0')
              $types[] = $type;
          $extra = '';                 
          if(count($types) == 1) $extra = ' (<a target="_blank" href="/node/add/'.$types[0].'?ref='.$key.'">'.t('Add').'</a>)';
          if(count($types) > 1) $extra = ' (<a target="_blank" href="/node/add">'.t('Add').'</a>)';
                        
          
          if(isset($form[$key][$form[$key]['#language']][0]['nid']))              
            $form[$key][$form[$key]['#language']][0]['nid']['#title'] = $form[$key][$form[$key]['#language']][0]['nid']['#title'].$extra;
          else
            $form[$key][$form[$key]['#language']]['#title'] = $form[$key][$form[$key]['#language']]['#title'].$extra;
        }
      }
  }
  if($form_id == 'news_node_form' && $form['nid']['#value'] == NULL){
    if(isset($_GET['ref'])){                            
      $res = db_select('field_data_field_voc_related_fields','f')
              ->condition(db_and()->condition('field_voc_related_fields_value','%'.$_GET['ref'].'%','LIKE')
                                  ->condition('bundle','news_category')
                                  ->condition('entity_type','taxonomy_term'))
              ->fields('f',array('entity_id'))
              ->execute()
              ->fetchAssoc();
      if(isset($res) && isset($res['entity_id']) && (int)$res['entity_id'] > 0){
        $form['field_news_category'][$form['field_news_category']['#language']]['#default_value'] = array($res['entity_id']);      
      }
    }
  }
  
  if($form_id == 'gallery_node_form' && $form['nid']['#value'] == NULL){
    if(isset($_GET['ref'])){                            
      $res = db_select('field_data_field_voc_related_fields','f')
              ->condition(db_and()->condition('field_voc_related_fields_value','%'.$_GET['ref'].'%','LIKE')
                                  ->condition('bundle','gallery_type')
                                  ->condition('entity_type','taxonomy_term'))
              ->fields('f',array('entity_id'))
              ->execute()
              ->fetchAssoc();
      if(isset($res) && isset($res['entity_id']) && (int)$res['entity_id'] > 0){
        $form['field_gallery_type'][$form['field_gallery_type']['#language']]['#default_value'] = array($res['entity_id']);      
      }
    }
  }
  
}

function node_reference_extra_menu() {
  $items['news_settings/autocomplete'] = array(
    'page callback' => 'node_reference_extra_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function node_reference_extra_autocomplete($string = '') {     
  $options = array(
    'string' => $string,
    'limit' => 10,
  );
  $references = node_reference_extra_potential_references($options);

  $matches = array();
  foreach ($references as $id => $row) {
    // Markup is fine in autocompletion results (might happen when rendered
    // through Views) but we want to remove hyperlinks.
    $suggestion = preg_replace('/<a href="([^<]*)">([^<]*)<\/a>/', '$2', $row['rendered']);
    // Add a class wrapper for a few required CSS overrides.
    $matches[$row['title'] . " [nid:$id]"] = '<div class="reference-autocomplete">' . $suggestion . '</div>';
  }
  drupal_json_output($matches);
}

function node_reference_extra_potential_references($options = array()) {
  // Fill in default options.
  $options += array(
    'string' => '',
    'match' => 'contains',
    'ids' => array(),
    'limit' => 0,
  );

  $results = &drupal_static(__FUNCTION__, array());

  $references = _node_reference_extra_potential_references_standard( $options);

  return $references;
}
/**
 * Helper function for node_reference_potential_references().
 *
 * List of referenceable nodes defined by content types.
 */
function _node_reference_extra_potential_references_standard($options) {

  $query = db_select('node', 'n');
  $node_nid_alias   = $query->addField('n', 'nid');
  $node_title_alias = $query->addField('n', 'title', 'node_title');
  $node_type_alias  = $query->addField('n', 'type',  'node_type');
  $query->addTag('node_access');
  $query->condition('n.type', array('news','page','article','poll','biography','gallery','match','matches_archive','person'),'IN');
 

  if ($options['string'] !== '') {
    switch ($options['match']) {
      case 'contains':
        $query->condition('n.title', '%' . $options['string'] . '%', 'LIKE');
        break;

      case 'starts_with':
        $query->condition('n.title', $options['string'] . '%', 'LIKE');
        break;

      case 'equals':
      default: // no match type or incorrect match type: use "="
        $query->condition('n.title', $options['string']);
        break;
    }
  }

  if ($options['ids']) {
    $query->condition('n.nid', $options['ids'], 'IN');
  }

  if ($options['limit']) {
    $query->range(0, $options['limit']);
  }

  $query
    ->orderBy($node_title_alias)
    ->orderBy($node_type_alias);

  $result = $query->execute()->fetchAll();
  $references = array();
  foreach ($result as $node) {
    $references[$node->nid] = array(
      'title'    => $node->node_title,
      'rendered' => check_plain($node->node_title),
    );
  }
  return $references;
}

  
?>
